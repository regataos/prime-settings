#!/bin/bash

# Max-Q notification system

# Configure the dGPU manufacturer's logo
if test -e /usr/bin/nvidia-xconfig ; then
	logo_gpu="nvidia-dgpu"
else
	logo_gpu="amd-dgpu"
fi

# Notify the user that a restart is required
function restart_system() {
	notify-send -i chronometer-reset -u normal -a 'Max-Q' "Reiniciar o Regata OS" \
	"É necessário reiniciar para que as mudanças tenham efeito no Regata OS."
}

# Notify when dGPU is disabled or enabled for all applications
function disable_run_dgpu() {
	if test -e /usr/bin/nvidia-xconfig ; then
		logo_gpu="nvidia-dgpu-off"
	else
		logo_gpu="amd-dgpu-off"
	fi

	notify-send -i $logo_gpu -u normal -a 'Max-Q' "Não renderizar com a dGPU" \
	"Não renderizar os aplicativos listados no Max-Q com a dGPU."
}

function enable_run_dgpu() {
	notify-send -i $logo_gpu -u normal -a 'Max-Q' "Renderizar com a dGPU" \
	"Renderizar os aplicativos listados no Max-Q com a dGPU."
}

# Running app or game with dGPU
function running_with_dgpu() {
	if test -e /usr/bin/nvidia-xconfig ; then
		notify-send -i $logo_gpu -u normal -a 'Max-Q' "Renderizando com a dGPU" \
		"Usando a GPU NVIDIA para a renderização gráfica."
	else
		notify-send -i $logo_gpu -u normal -a 'Max-Q' "Renderizando com a dGPU" \
		"Usando a GPU AMD para a renderização gráfica."
	fi
}

# Notify copy of information to the clipboard
function copy_info() {
	notify-send -i klipper -u normal -a 'Max-Q' "Informações copiadas" \
	"Informações copiadas para área de transferência."
}

# Enable/Disable TearFree
function tearfree_on() {
	notify-send -i video-display -u normal -a 'Max-Q' "Prevenir Screen Tearing" \
	'Prevenir o fenômeno Tearing para evitar "imagem quebrada" na tela.'
}

function tearfree_off() {
	notify-send -i video-display -u normal -a 'Max-Q' "Não prevenir Screen Tearing" \
	'O fenômeno Tearing resulta em "imagem quebrada" na tela.'
}

# CPU governor
function cpu_powersave() {
	notify-send -i preferences-system-power-management -u normal -a 'Max-Q' "Equilibrado" \
	"Fazer o equilíbrio entre o desempenho e o consumo de energia."
}

function cpu_performance() {
	notify-send -i preferences-system-power-management -u normal -a 'Max-Q' "Alto desempenho" \
	"Dar prioridade ao desempenho; pode consumir mais energia."
}

# KWin compositor
function compositor_on() {
	notify-send -i preferences-system-windows-effect-logout -u normal -a 'Max-Q' "Efeitos ativados" \
	"Os efeitos da área de trabalho foram ativados."
}

function compositor_off() {
	notify-send -i preferences-system-windows-effect-login -u normal -a 'Max-Q' "Efeitos desativados" \
	"Os efeitos da área de trabalho foram desativados; reduz o uso da GPU."
}

# Widgets unlocked
function unlockwidgets_on() {
	notify-send -i lock -u normal -a 'Max-Q' "Widgets bloqueados" \
	"Os widgets da área de trabalho foram bloqueados."
}

function unlockwidgets_off() {
	notify-send -i unlock -u normal -a 'Max-Q' "Widgets desbloqueados" \
	"Os widgets da área de trabalho foram desbloqueados."
}

# AMD AMF
function amf_on() {
	notify-send -i amd-dgpu -u normal -a 'Max-Q' "AMD AMF ativado" \
	"O AMD AMF foi ativado para os apps suportados."
}

function amf_off() {
	notify-send -i amd-dgpu-off -u normal -a 'Max-Q' "AMD AMF desativado" \
	"O AMD AMF está desativado."
}

case $1 in
   "-restart") restart_system
        ;;
   "-disable-run-dgpu") disable_run_dgpu
        ;;
   "-enable-run-dgpu") enable_run_dgpu
        ;;
   "-running-with-dgpu") running_with_dgpu
        ;;
   "-copy-info") copy_info
        ;;
   "-tearfree-on") tearfree_on
        ;;
   "-tearfree-off") tearfree_off
        ;;
   "-cpu-powersave") cpu_powersave
        ;;
   "-cpu-performance") cpu_performance
        ;;
   "-compositor-on") compositor_on
        ;;
   "-compositor-off") compositor_off
        ;;
   "-unlockwidgets-on") unlockwidgets_on
        ;;
   "-unlockwidgets-off") unlockwidgets_off
        ;;
   "-amf-on") amf_on
        ;;
   "-amf-off") amf_off
        ;;
   *) echo "Invalid option!"
    	exit 1
    	;;
esac

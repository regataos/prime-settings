#!/bin/bash

# Capture information about using VRAM
#Capture the discrete GPU video memory (VRAM) frequency
function vram_freq() {
	detect_driver=$(cat "/tmp/regataos-prime/config/system-info/graphics-driver.txt")
	if [[ $detect_driver == *"nvidia"* ]]; then
		vram_freq=$(nvidia-smi --query-gpu=clocks.mem --format=csv,noheader | sed 's/ MHz/MHz/')
		if [[ $vram_freq == *"Not Supported"* ]]; then
			echo "nodata"
		else
			echo "$vram_freq"
		fi
	else
		dgpu=$(cat "/tmp/regataos-prime/config/system-info/opengl-vendor.txt")
		if [[ $dgpu == *"AMD"* ]]; then
			if test -e /sys/class/drm/card0/device/pp_dpm_mclk; then
				vram_freq=$(cat /sys/class/drm/card0/device/pp_dpm_mclk | grep '*' | awk '{print $2}')
				echo "$vram_freq"
			else
				vram_freq=$(cat /sys/class/drm/card1/device/pp_dpm_mclk | grep '*' | awk '{print $2}')
				echo "$vram_freq"
			fi

		elif [[ $dgpu == *"Intel"* ]]; then
			echo "N/A"
		else
			echo "N/A"
		fi
	fi
}

#Capture the discrete GPU video memory (VRAM) usage
function vram_usage() {
	detect_driver=$(cat "/tmp/regataos-prime/config/system-info/graphics-driver.txt")
	if [[ $detect_driver == *"nvidia"* ]]; then
		vram_usage=$(nvidia-smi --query-gpu=utilization.memory --format=csv,noheader | awk '{print $1}')
		if [[ $vram_usage == *"Not Supported"* ]]; then
			echo "nodata"
		else
			echo "$vram_usage"
		fi
	else
		dgpu=$(cat "/tmp/regataos-prime/config/system-info/opengl-vendor.txt")
		if [[ $dgpu == *"AMD"* ]]; then
			vram_usage=$(tail -2 /tmp/regataos-prime/radeontop.log | awk '{print $27}' | head -1 | tail -1 | cut -d'.' -f -1)
			echo "$vram_usage"

		elif [[ $dgpu == *"Intel"* ]]; then
			echo "nodata"
		else
			echo "nodata"
		fi
	fi
}

# Capture information about using GPU
#Capture the discrete GPU usage
function gpu_usage() {
	detect_driver=$(cat "/tmp/regataos-prime/config/system-info/graphics-driver.txt")
	if [[ $detect_driver == *"nvidia"* ]]; then
		gpu_usage=$(nvidia-smi --query-gpu=utilization.gpu --format=csv,noheader | awk '{print $1}')
		if [[ $gpu_usage == *"Not Supported"* ]]; then
			echo "nodata"
		else
			echo "$gpu_usage"
		fi
	else
		dgpu=$(cat "/tmp/regataos-prime/config/system-info/opengl-vendor.txt")
		if [[ $dgpu == *"AMD"* ]]; then
			ps -C radeontop >/dev/null
			if [ $? = 1 ]; then
				rm -f /tmp/regataos-prime/radeontop.log
				radeontop -d /tmp/regataos-prime/radeontop.log
			fi

			gpu_usage=$(tail -2 /tmp/regataos-prime/radeontop.log | awk '{print $5}' | head -1 | tail -1 | cut -d'.' -f -1)
			echo "$gpu_usage"

		elif [[ $dgpu == *"Intel"* ]]; then
			gpu_usage=$(cat /tmp/regataos-prime/intel_gpu_top.log | awk '{print $9}' | tail -1 | cut -d'.' -f -1)
			echo "$gpu_usage"
		else
			echo "nodata"
		fi
	fi
}

#Capture the discrete GPU temp
function gpu_temp() {
	detect_driver=$(cat "/tmp/regataos-prime/config/system-info/graphics-driver.txt")
	if [[ $detect_driver == *"nvidia"* ]]; then
		gpu_temp=$(nvidia-smi --query-gpu=temperature.gpu --format=csv,noheader)
		if [[ $gpu_temp == *"Not Supported"* ]]; then
			echo "nodata"
		else
			echo "$gpu_temp"°C
		fi
	else
		dgpu=$(cat "/tmp/regataos-prime/config/system-info/opengl-vendor.txt")
		if [[ $dgpu == *"AMD"* ]]; then
			if test -e /sys/class/drm/card0/device/hwmon/hwmon*/temp1_input; then
				gpu_temp=$(cat /sys/class/drm/card0/device/hwmon/hwmon*/temp1_input | awk '{ foo = $1 / 1000 ; print foo }')
				echo "$gpu_temp"°C
			else
				gpu_temp=$(cat /sys/class/drm/card1/device/hwmon/hwmon*/temp1_input | awk '{ foo = $1 / 1000 ; print foo }')
				echo "$gpu_temp"°C
			fi

		elif [[ $dgpu == *"Intel"* ]]; then
			echo "N/A"
		else
			echo "N/A"
		fi
	fi
}

#Capture the discrete GPU frequency
function gpu_freq() {
	detect_driver=$(cat "/tmp/regataos-prime/config/system-info/graphics-driver.txt")
	if [[ $detect_driver == *"nvidia"* ]]; then
		gpu_freq=$(nvidia-smi -q -d CLOCK | grep Graphics | head -1 | tail -1 | awk '{print $3}')
		if [[ $gpu_freq == *"Not Supported"* ]]; then
			echo "nodata"
		else
			echo "$gpu_freq"MHz
		fi
	else
		dgpu=$(cat "/tmp/regataos-prime/config/system-info/opengl-vendor.txt")
		if [[ $dgpu == *"AMD"* ]]; then
			if test -e /sys/class/drm/card0/device/pp_dpm_sclk; then
				gpu_freq=$(cat /sys/class/drm/card0/device/pp_dpm_sclk | grep '*' | awk '{print $2}')
				echo "$gpu_freq"
			else
				gpu_freq=$(cat /sys/class/drm/card1/device/pp_dpm_sclk | grep '*' | awk '{print $2}')
				echo "$gpu_freq"
			fi

		elif [[ $dgpu == *"Intel"* ]]; then
			gpu_freq=$(cat /tmp/regataos-prime/intel_gpu_freq.log)
			echo "$gpu_freq"MHz

		else
			echo "0"MHz
		fi
	fi
}

# Capture iGPU
function capture_igpu() {
	igpu=$(glxinfo | grep "renderer string" | cut -d":" -f 2-)

	if [[ $igpu == *"Intel"* ]]; then
		igpu_model=$(echo $igpu | sed 's/Mesa DRI Intel(R) /Intel /' | sed 's/Mesa Intel(R) /Intel /' | cut -d"(" -f -1)
		echo "$igpu_model"

	elif [[ $igpu == *"AMD"* ]]; then
		igpu_model=$(echo $igpu | sed 's/AMD Radeon(TM) //' | sed 's/Graphics//' | cut -d"(" -f -1 | cut -d"," -f -1)
		echo "$igpu_model"

	else
		igpu_model=$(echo $igpu)
		echo "$igpu_model"
	fi
}

# Capture discrete GPU
function capture_dgpu() {
	if test -e /tmp/regataos-prime/use-hybrid-graphics.txt; then
		# Capture dGPU
		dgpu2=$(inxi -G | egrep -i "Card-2|Device-2")

		if [[ $dgpu2 == *"Picasso"* ]]; then
			# The dGPU appears to be an AMD APU. Check the primary GPU
			dgpu1=$(inxi -G | egrep -i "Card-1|Device-1")
			if [[ $dgpu1 == *"NVIDIA"* ]]; then
				detect_driver=$(cat "/tmp/regataos-prime/config/system-info/graphics-driver.txt")
				if [[ $detect_driver == *"nvidia"* ]]; then
					dgpu_model=$(nvidia-smi --query-gpu=name --format=csv,noheader)
				else
					dgpu_model=$(echo $dgpu1 | cut -d: -f 3-)
				fi
				echo "NVIDIA $dgpu_model"

			elif [[ $dgpu1 == *"GeForce"* ]]; then
				detect_driver=$(cat "/tmp/regataos-prime/config/system-info/graphics-driver.txt")
				if [[ $detect_driver == *"nvidia"* ]]; then
					dgpu_model=$(nvidia-smi --query-gpu=name --format=csv,noheader)
				else
					dgpu_model=$(echo $dgpu1 | cut -d: -f 3-)
				fi
				echo "NVIDIA $dgpu_model"

			elif [[ $dgpu1 == *"AMD"* ]]; then
				dgpu=$(DRI_PRIME=1 glxinfo | grep "renderer string" | cut -d":" -f 2-)
				dgpu_model=$(echo $dgpu | sed 's/AMD Radeon(TM) //' | sed 's/Graphics//' | cut -d"(" -f -1 | cut -d"," -f -1)
				echo "$dgpu_model"

			else
				dgpu=$(DRI_PRIME=1 glxinfo | grep "renderer string" | cut -d":" -f 2-)
				dgpu_model=$(echo $dgpu | sed 's/Mesa DRI Intel(R) /Intel /' | sed 's/Mesa Intel(R) /Intel /' | cut -d"(" -f -1)
				echo "$dgpu_model"
			fi

		elif [[ $dgpu2 == *"RAVEN"* ]]; then
			# The dGPU appears to be an AMD APU. Check the primary GPU
			dgpu1=$(inxi -G | egrep -i "Card-1|Device-1")
			if [[ $dgpu1 == *"NVIDIA"* ]]; then
				detect_driver=$(cat "/tmp/regataos-prime/config/system-info/graphics-driver.txt")
				if [[ $detect_driver == *"nvidia"* ]]; then
					dgpu_model=$(nvidia-smi --query-gpu=name --format=csv,noheader)
				else
					dgpu_model=$(echo $dgpu1 | cut -d: -f 3-)
				fi
				echo "NVIDIA $dgpu_model"

			elif [[ $dgpu1 == *"GeForce"* ]]; then
				detect_driver=$(cat "/tmp/regataos-prime/config/system-info/graphics-driver.txt")
				if [[ $detect_driver == *"nvidia"* ]]; then
					dgpu_model=$(nvidia-smi --query-gpu=name --format=csv,noheader)
				else
					dgpu_model=$(echo $dgpu1 | cut -d: -f 3-)
				fi
				echo "NVIDIA $dgpu_model"

			elif [[ $dgpu1 == *"AMD"* ]]; then
				dgpu=$(DRI_PRIME=1 glxinfo | grep "renderer string" | cut -d":" -f 2-)
				dgpu_model=$(echo $dgpu | sed 's/AMD Radeon(TM) //' | sed 's/Graphics//' | cut -d"(" -f -1 | cut -d"," -f -1)
				echo "$dgpu_model"

			else
				dgpu=$(DRI_PRIME=1 glxinfo | grep "renderer string" | cut -d":" -f 2-)
				dgpu_model=$(echo $dgpu | sed 's/Mesa DRI Intel(R) /Intel /' | sed 's/Mesa Intel(R) /Intel /' | cut -d"(" -f -1)
				echo "$dgpu_model"
			fi

		elif [[ $dgpu2 == *"AMD"* ]]; then
			dgpu=$(DRI_PRIME=1 glxinfo | grep "renderer string" | cut -d":" -f 2-)
			dgpu_model=$(echo $dgpu | sed 's/AMD Radeon(TM) //' | sed 's/Graphics//' | cut -d"(" -f -1 | cut -d"," -f -1)
			echo "$dgpu_model"

		elif [[ $dgpu2 == *"Radeon"* ]]; then
			dgpu=$(DRI_PRIME=1 glxinfo | grep "renderer string" | cut -d":" -f 2-)
			dgpu_model=$(echo $dgpu | sed 's/AMD Radeon(TM) //' | sed 's/Graphics//' | cut -d"(" -f -1 | cut -d"," -f -1)
			echo "$dgpu_model"

		elif [[ $dgpu2 == *"NVIDIA"* ]]; then
			detect_driver=$(cat "/tmp/regataos-prime/config/system-info/graphics-driver.txt")
			if [[ $detect_driver == *"nvidia"* ]]; then
				dgpu_model=$(nvidia-smi --query-gpu=name --format=csv,noheader)
			else
				dgpu1=$(inxi -G | egrep -i "Card-1|Device-1" | cut -d":" -f 3- | cut -d"[" -f 2- | cut -d"]" -f -1)
				dgpu_model=$(echo NVIDIA $dgpu1 | cut -d: -f 3-)
			fi
			echo "$dgpu_model"

		elif [[ $dgpu2 == *"GeForce"* ]]; then
			detect_driver=$(cat "/tmp/regataos-prime/config/system-info/graphics-driver.txt")
			if [[ $detect_driver == *"nvidia"* ]]; then
				dgpu_model=$(nvidia-smi --query-gpu=name --format=csv,noheader)
			else
				dgpu1=$(inxi -G | egrep -i "Card-1|Device-1" | cut -d":" -f 3- | cut -d"[" -f 2- | cut -d"]" -f -1)
				dgpu_model=$(echo NVIDIA $dgpu1 | cut -d: -f 3-)
			fi
			echo "$dgpu_model"

		elif [[ $dgpu == *"Intel"* ]]; then
			dgpu=$(DRI_PRIME=1 glxinfo | grep "renderer string" | cut -d":" -f 2-)
			dgpu_model=$(echo $dgpu | sed 's/Mesa DRI Intel(R) /Intel /' | sed 's/Mesa Intel(R) /Intel /' | cut -d"(" -f -1)
			echo "$dgpu_model"

		else
			echo "Not detected graphics"
		fi

	else
		# The "PRIME" feature does not appear to be supported by the hardware, capture discrete GPU
		dgpu=$(inxi -G | egrep -i "Card|Device")
		dgpu1=$(inxi -G | egrep -i "Card|Device" | cut -d":" -f 3- | cut -d"[" -f 2- | cut -d"]" -f -1)

		if [[ $dgpu == *"AMD"* ]]; then
			dgpu=$(DRI_PRIME=1 glxinfo | grep "renderer string" | cut -d":" -f 2-)
			dgpu_model=$(echo $dgpu | sed 's/AMD Radeon(TM) //' | sed 's/Graphics//' | cut -d"(" -f -1 | cut -d"," -f -1)
			echo "$dgpu_model"

		elif [[ $dgpu == *"Radeon"* ]]; then
			dgpu=$(DRI_PRIME=1 glxinfo | grep "renderer string" | cut -d":" -f 2-)
			dgpu_model=$(echo $dgpu | sed 's/AMD Radeon(TM) //' | sed 's/Graphics//' | cut -d"(" -f -1 | cut -d"," -f -1)
			echo "$dgpu_model"

		elif [[ $dgpu == *"NVIDIA"* ]]; then
			detect_driver=$(cat "/tmp/regataos-prime/config/system-info/graphics-driver.txt")
			if [[ $detect_driver == *"nvidia"* ]]; then
				dgpu_model=$(nvidia-smi --query-gpu=name --format=csv,noheader)
			else
				dgpu_model=$(echo NVIDIA $dgpu1)
			fi
			echo "$dgpu_model"

		elif [[ $dgpu == *"GeForce"* ]]; then
			detect_driver=$(cat "/tmp/regataos-prime/config/system-info/graphics-driver.txt")
			if [[ $detect_driver == *"nvidia"* ]]; then
				dgpu_model=$(nvidia-smi --query-gpu=name --format=csv,noheader)
			else
				dgpu_model=$(echo NVIDIA $dgpu1)
			fi
			echo "$dgpu_model"

		elif [[ $dgpu == *"Intel"* ]]; then
			dgpu=$(DRI_PRIME=1 glxinfo | grep "renderer string" | cut -d":" -f 2-)
			dgpu_model=$(echo $dgpu | sed 's/Mesa DRI Intel(R) /Intel /' | sed 's/Mesa Intel(R) /Intel /' | cut -d"(" -f -1)
			echo "$dgpu_model"

		else
			echo "Not detected graphics"
		fi
	fi
}

# Capture OpenGL version
function opengl_version() {
	echo $(glxinfo | grep -i "OpenGL version string" | cut -d":" -f 2- | awk '{print $1}')
}

# Capture Vulkan version
function vulkan_version() {
	vulkan_test=$(vulkaninfo)
	if [[ $vulkan_test == *"Instance Extensions"* ]]; then
		if [[ $vulkan_test != *"Vulkan support is incomplete"* ]]; then
			echo $(vulkaninfo | grep "Vulkan Instance Version") >"/tmp/regataos-prime/vulkan-version.txt"
			sed -i '/WARNING/d' "/tmp/regataos-prime/vulkan-version.txt"

		else
			echo "Incomplete support" >"$HOME/.config/regataos-prime/system-info/vulkan-version.txt"
		fi

	else
		echo "Not supported" >"$HOME/.config/regataos-prime/system-info/vulkan-version.txt"
	fi
}

# Capture kernel version
function kernel_version() {
	echo $(uname -r | cut -d"-" -f -1)
}

# Capture Mesa version and identify driver for Mesa
function mesa_version() {
	mesa_driver=$(glxinfo | grep -i 'OpenGL vendor string' | awk '{print $4}')
	mesa_version=$(glxinfo | grep -i 'OpenGL version string' | awk '{print $8}')

	if [[ $(echo $mesa_driver) == *"Intel"* ]]; then
		echo "$mesa_version (Intel)"

	elif [[ $(echo $mesa_driver) == *"intel"* ]]; then
		echo "$mesa_version (Intel)"

	elif [[ $(echo $mesa_driver) == *"Iris"* ]]; then
		echo "$mesa_version (Intel Iris)"

	elif [[ $(echo $mesa_driver) == *"iris"* ]]; then
		echo "$mesa_version (Intel Iris)"

	elif [[ $(echo $mesa_driver) == *"i915"* ]]; then
		echo "$mesa_version (Intel)"

	elif [[ $(echo $mesa_driver) == *"i965"* ]]; then
		echo "$mesa_version (Intel)"

	elif [[ $(echo $mesa_driver) == *"modesetting"* ]]; then
		echo "$mesa_version (modesetting)"

	elif [[ $(echo $mesa_driver) == *"AMD"* ]]; then
		echo "$mesa_version (AMDGPU)"

	elif [[ $(echo $mesa_driver) == *"amdgpu"* ]]; then
		echo "$mesa_version (AMDGPU)"

	elif [[ $(echo $mesa_driver) == *"radeon"* ]]; then
		echo "$mesa_version (Radeon)"

	elif [[ $(echo $mesa_driver) == *"nouveau"* ]]; then
		echo "$mesa_version (Nouveau)"

	elif [[ $(echo $mesa_driver) == *"nvidia"* ]]; then
		mesa_repo=$(grep -r "mainRepositoryName" "/usr/share/regataos/regataos-base-version.txt" | cut -d"=" -f 2-)
		mesa_version=$(grep -R 'srcpackage:Mesa' /var/cache/zypp/solv/$(echo "$mesa_repo") | awk '{print $2}' | cut -d'-' -f -1 | head -1 | tail -1)
		echo "$mesa_version"

	elif [[ $(echo $mesa_driver) == *"NVIDIA"* ]]; then
		mesa_repo=$(grep -r "mainRepositoryName" "/usr/share/regataos/regataos-base-version.txt" | cut -d"=" -f 2-)
		mesa_version=$(grep -R 'srcpackage:Mesa' /var/cache/zypp/solv/$(echo "$mesa_repo") | awk '{print $2}' | cut -d'-' -f -1 | head -1 | tail -1)
		echo "$mesa_version"

	else
		echo "$mesa_version (modesetting)"
	fi
}

function cpu_use() {
	cpu_use=$(awk '{u=$2+$4; t=$2+$4+$5; if (NR==1){u1=u; t1=t;} else print ($2+$4-u1) * 100 / (t-t1) ; }' <(grep 'cpu ' /proc/stat) <(
		sleep 1
		grep 'cpu ' /proc/stat
	) | cut -d'.' -f -1)
	echo "$cpu_use" >"/tmp/regataos-prime/cpu-usage.log"
}

function cpu_freq() {
	cpu_freq=$(cat /proc/cpuinfo | grep -i mhz | awk '{print $4}' | cut -d'.' -f -1 | head -1)
	echo "$cpu_freq"MHz
}

# Run options
case $1 in
"-gpu-usage")
	gpu_usage
	;;
"-gpu-temp")
	gpu_temp
	;;
"-gpu-freq")
	gpu_freq
	;;
"-vram-freq")
	vram_freq
	;;
"-vram-usage")
	vram_usage
	;;
"-capture-igpu")
	capture_igpu
	;;
"-capture-dgpu")
	capture_dgpu
	;;
"-mesa-version")
	mesa_version
	;;
"-opengl-version")
	opengl_version
	;;
"-vulkan-version")
	vulkan_version
	;;
"-kernel-version")
	kernel_version
	;;
"-cpu-use")
	cpu_use
	;;
"-cpu-freq")
	cpu_freq
	;;
*)
	echo "Invalid option!"
	exit 1
	;;
esac
